/*
 * Project Euler #12
 * Solution by nathan dotz - nathan (period) dotz (at sign) gmail (period) com
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 *
 *      1: 1
 *      3: 1,3
 *      6: 1,2,3,6
 *      10: 1,2,5,10
 *      15: 1,3,5,15
 *      21: 1,3,7,21
 *      28: 1,2,4,7,14,28
 *      We can see that 28 is the first triangle number to have over five divisors.
 *      What is the value of the first triangle number to have over five hundred divisors?
 *
 */

#include <iostream>
using namespace std;

int main(){
	int triNumberIndex = 1;
	unsigned long long currentTriangle = 0ULL;
	int divisorList[510];
	while (!currentTriangle) {
		for(int i = 0; i<510; i++) {
			divisorList[i] = 0; // clear list
		}

		for (int j = triNumberIndex; j > 0; j--) { // generate next triangle
			currentTriangle += j;
		}

		//cout << currentTriangle << " - ";
		int index = 0;                             // set index for divisorList
		unsigned int midwaydivisor = currentTriangle;
		for(unsigned int f = 1U; f < midwaydivisor; f++) {
			if(currentTriangle%f == 0) {
				divisorList[index++] = f;
				if(f != currentTriangle/f)
					divisorList[index++] = currentTriangle/f;
				if(currentTriangle/f < midwaydivisor)
					midwaydivisor = currentTriangle/f;
			}
		}

		int divisorCount = 0;
		for(int i = 0; i<510;i++) {
			if ( divisorList[i]!=0) {
				divisorCount++;
			}
		}
		//cout << divisorCount << " divisors " << endl;
		triNumberIndex += 1;
		if(divisorCount > 500) {
			cout << currentTriangle << " has " << divisorCount << " divisors" << endl;
			break;
		}
		currentTriangle = 0;
	}
	return 0;
}
